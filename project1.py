# -*- coding: utf-8 -*-
"""project1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/132QiC3fGuTWUZIaZK33PfHD4LHPOlTGF
"""

import numpy as np
import pandas as pd
import seaborn as sns
from matplotlib import pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
import warnings
warnings.filterwarnings("ignore")

df=pd.read_csv("https://raw.githubusercontent.com/Premalatha-success/Datasets/main/TaxiFare.csv")

df.head(10)

df.tail(10)

df.sample(10)

df.shape

df.dtypes

df.info()

df.describe(include="all")

df.describe()

df.isnull().sum()

#creating datetime features based on pickup_datetime
df["date_time_of_pickup"] = pd.to_datetime(df["date_time_of_pickup"])
df["date_time_of_pickup"] = pd.to_datetime(df["date_time_of_pickup"])

import calendar
df["pickup_date"]= df["date_time_of_pickup"].dt.date
df["pickup_day"]=df["date_time_of_pickup"].apply(lambda x:x.day)
df["pickup_hour" ]=df["date_time_of_pickup"].apply(lambda x:x.hour)
df["pickup_day_of_week"]=df["date_time_of_pickup"].apply(lambda x:calendar.day_name[x.weekday()])
df["pickup_month"]=df["date_time_of_pickup"].apply(lambda x:x.month)
df["pickup_years"]=df["date_time_of_pickup"].apply(lambda x:x.year)
df.head()

sns.boxplot(y="amount",data=df)

#Removing Outlier value
df= df[((df["longitude_of_pickup"] > -78) &
(df["longitude_of_pickup"] <-70)) &
((df["longitude_of_dropoff"]> -78) &
(df["longitude_of_dropoff"] < -70)) &
((df["latitude_of_pickup"] > 37) &
(df["latitude_of_pickup"] < 45)) & ((df[ "latitude_of_dropoff"]> 37) &
(df["latitude_of_dropoff"] < 45)) & (df["no_of_passenger"] > 0) &
(df["amount"] >= 2.5)]

df.describe()

df.isnull().sum()

"""**Visualising** **Target** **variable** **bold text**"""

plt.figure(figsize =(12, 5))
n, bins, patches=plt.hist(df.amount, 1000, facecolor='blue',alpha=0.75) 
plt.xlabel("amount",fontsize=15,fontweight="bold") 
plt.title('Histogram of Amount', fontsize=25, fontweight="bold")
plt.xlim(0, 200)
plt.show();

plt.figure(figsize=(8,5))
sns.kdeplot (np.log(df['amount'].values)).set_title( "Distribution of Fare Amount in Log scale)", fontsize=15, fontweight='bold');

#analysing top 5 Fare Amount
df['amount'].value_counts(normalize=True).iloc[:5]

plt.figure(figsize=(10,6))
df['no_of_passenger'].value_counts().plot.bar (color = 'y', edgecolor = "k");
plt.title('Histogram of no of Passengers', fontsize=25, fontweight='bold') 
plt.xlabel('no_of_Passenger', fontsize=15, fontweight='bold') 
plt.ylabel('Count', fontsize=15, fontweight='bold')

plt.figure(figsize=(10,6))
df['pickup_years'].value_counts().plot.bar (color = 'r', edgecolor = "k");
plt.title('Total picsups in year ', fontsize=25, fontweight='bold') 
plt.xlabel('no_of_Passenger', fontsize=15, fontweight='bold') 
plt.ylabel('Count', fontsize=15, fontweight='bold')

plt.figure(figsize=(10,6))
df['pickup_day_of_week'].value_counts().plot.bar (color = 'b', edgecolor = "k");
plt.title('Total picsups in weekdays ', fontsize=25, fontweight='bold') 
plt.xlabel('no_of_Passenger', fontsize=15, fontweight='bold') 
plt.ylabel('Count', fontsize=15, fontweight='bold')

df['no_of_passenger'].value_counts()

"""Plot Heatmap of Pickups and Dropoffs within New York"""

#in which longitude and latitude the pickups are more
city_long_border = (-74.03, -73.75) 
city_lat_border= (40.63, 48.85)
df.plot(kind="scatter", x="longitude_of_dropoff", y="latitude_of_dropoff", color='green',s=.02, alpha=.6)
plt.title("Dropoffs")
plt.ylim(city_lat_border)
plt.xlim(city_long_border)

df.plot(kind='scatter', x="longitude_of_pickup", y="latitude_of_pickup", color='blue',s=.02, alpha=.6)
plt.title("Pickups")
plt.ylim(city_lat_border)
plt.xlim(city_long_border)

def distance (lat1,lon1,lat2,lon2):
  p = 0.017453292519943295 # Pi/180
  a = 0.5-np.cos((lat2-lat1)*p)/2+ np.cos(lat1*p)*np.cos(lat2*p)*(1-np.cos((lon2-lon1)*p))/2
  return 0.6213712*12742*np.arcsin(np.sqrt(a))
#add new column to dataframe with distance in miles
df['distance_miles'] = distance (df.latitude_of_pickup, df.longitude_of_pickup, df.latitude_of_dropoff, df.longitude_of_dropoff)
df.head()

plt.figure(figsize=(15,8))
sns.kdeplot(df[ 'distance_miles'].values).set_title("Distribution Distance in Miles", fontsize=15, fontweight='bold');

df_final=df.copy()
df_final.head()

#Imputing Categorical Variables
Variables={'Monday': 1,'Tuesday':2,'Saturday':3,'Thursday':4,'Wednesday':5,'Sunday':6,'Friday':7}
year={2012: 1,2013 :2, 2011: 3, 2009: 4, 2010: 5, 2014: 6, 2015:7} 
df_final['pickup_years']=df_final['pickup_years'].map(year) 
df_final['pickup_day_of_week']=df_final['pickup_day_of_week'].map(Variables)
df_final.drop(['date_time_of_pickup'], axis=1, inplace=True)
df_final.head()

df_final=df_final.drop(["unique_id","pickup_date"],axis=1)

df['date_time_of_pickup'] = df['date_time_of_pickup'].apply(pd.Timestamp.timestamp)

df_final.isnull().sum()

df_final.info()

x=df_final.drop("amount",axis=1)
y=df_final["amount"]

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.30,random_state=1)

model=LinearRegression()

model.fit(x_train,y_train)

model.score(x_train,y_train)

model.score(x_test,y_test)

from sklearn.ensemble import RandomForestRegressor

model2=RandomForestRegressor(max_depth=1,n_estimators=100)

model2.fit(x_train,y_train)

model2.score(x_train,y_train)

model2.score(x_test,y_test)

df_final.shape

